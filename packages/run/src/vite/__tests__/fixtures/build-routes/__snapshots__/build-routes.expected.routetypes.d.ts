/*
  WARNING: This file is automatically generated and any changes made to it will be overwritten without warning.
  Do NOT manually edit this file or your changes will be lost.
*/

import type { HandlerLike, Route as AnyRoute, Context as AnyContext, ValidatePath, ValidateHref } from "@marko/run";



declare global {
  namespace MarkoRun {
    type GetPaths =
      | '/'
      | '/new'
      | '/notes/${id}'
      | '/callback/oauth2'
      | '/my'
      | '/${...match}';

    type PostPaths =
      | '/new'
      | '/notes/${id}'
      | '/notes/${id}/comments';

    type GetablePath<T extends string> = ValidatePath<GetPaths, T>;
    type GetableHref<T extends string> = ValidateHref<GetPaths, T>; 
    type PostablePath<T extends string> = ValidatePath<PostPaths, T>;
    type PostableHref<T extends string> = ValidateHref<PostPaths, T>; 
  }
}
interface Route1 extends AnyRoute<{}, undefined, `/`> {}
interface Route2 extends AnyRoute<{}, typeof import('./_protected/_home/new/+meta.json'), `/new`> {}
interface Route3 extends AnyRoute<{ id: string; }, undefined, `/notes/:id`> {}
interface Route4 extends AnyRoute<{ id: string; }, typeof import('./_protected/_home/notes/$id/comments/+meta')['default'], `/notes/:id/comments`> {}
interface Route5 extends AnyRoute<{}, undefined, `/callback/oauth2`> {}
interface Route6 extends AnyRoute<{}, undefined, `/my`> {}
interface Route7 extends AnyRoute<{ match: string; }, undefined, `/:match*`> {}

declare module './_protected/_home/new/+handler.post' {
  namespace MarkoRun {
    type Route = Route2;
    type Context = AnyContext<AnyContext['platform'], Route>;
    type Handler<_Params = Route['params'], _Meta = Route['meta']> = HandlerLike<Route>;
    function route(handler: Handler): typeof handler;
    function route<_Params = Route['params'], _Meta = Route['meta']>(handler: Handler): typeof handler;
  }
}

declare module './_protected/_home/notes/$id/+handler.put_post_delete' {
  namespace MarkoRun {
    type Route = Route3;
    type Context = AnyContext<AnyContext['platform'], Route>;
    type Handler<_Params = Route['params'], _Meta = Route['meta']> = HandlerLike<Route>;
    function route(handler: Handler): typeof handler;
    function route<_Params = Route['params'], _Meta = Route['meta']>(handler: Handler): typeof handler;
  }
}

declare module './_protected/_home/notes/$id/comments/+handler.put_post_delete' {
  namespace MarkoRun {
    type Route = Route4;
    type Context = AnyContext<AnyContext['platform'], Route>;
    type Handler<_Params = Route['params'], _Meta = Route['meta']> = HandlerLike<Route>;
    function route(handler: Handler): typeof handler;
    function route<_Params = Route['params'], _Meta = Route['meta']>(handler: Handler): typeof handler;
  }
}

declare module './callback/oauth2/+handler.get' {
  namespace MarkoRun {
    type Route = Route5;
    type Context = AnyContext<AnyContext['platform'], Route>;
    type Handler<_Params = Route['params'], _Meta = Route['meta']> = HandlerLike<Route>;
    function route(handler: Handler): typeof handler;
    function route<_Params = Route['params'], _Meta = Route['meta']>(handler: Handler): typeof handler;
  }
}

declare module './my/+handler.get' {
  namespace MarkoRun {
    type Route = Route6;
    type Context = AnyContext<AnyContext['platform'], Route>;
    type Handler<_Params = Route['params'], _Meta = Route['meta']> = HandlerLike<Route>;
    function route(handler: Handler): typeof handler;
    function route<_Params = Route['params'], _Meta = Route['meta']>(handler: Handler): typeof handler;
  }
}

declare module './$$match/+handler.get' {
  namespace MarkoRun {
    type Route = Route7;
    type Context = AnyContext<AnyContext['platform'], Route>;
    type Handler<_Params = Route['params'], _Meta = Route['meta']> = HandlerLike<Route>;
    function route(handler: Handler): typeof handler;
    function route<_Params = Route['params'], _Meta = Route['meta']>(handler: Handler): typeof handler;
  }
}

declare module './+middleware' {
  namespace MarkoRun {
    type Route = Route1 | Route2 | Route3 | Route4 | Route5 | Route6 | Route7;
    type Context = AnyContext<AnyContext['platform'], Route>;
    type Handler<_Params = Route['params'], _Meta = Route['meta']> = HandlerLike<Route>;
    function route(handler: Handler): typeof handler;
    function route<_Params = Route['params'], _Meta = Route['meta']>(handler: Handler): typeof handler;
  }
}

declare module './_protected/+middleware' {
  namespace MarkoRun {
    type Route = Route1 | Route2 | Route3 | Route4;
    type Context = AnyContext<AnyContext['platform'], Route>;
    type Handler<_Params = Route['params'], _Meta = Route['meta']> = HandlerLike<Route>;
    function route(handler: Handler): typeof handler;
    function route<_Params = Route['params'], _Meta = Route['meta']>(handler: Handler): typeof handler;
  }
}

declare module './_protected/_home/+middleware' {
  namespace MarkoRun {
    type Route = Route1 | Route2 | Route3 | Route4;
    type Context = AnyContext<AnyContext['platform'], Route>;
    type Handler<_Params = Route['params'], _Meta = Route['meta']> = HandlerLike<Route>;
    function route(handler: Handler): typeof handler;
    function route<_Params = Route['params'], _Meta = Route['meta']>(handler: Handler): typeof handler;
  }
}

declare module './_protected/_home/notes/$id/+middleware' {
  namespace MarkoRun {
    type Route = Route3 | Route4;
    type Context = AnyContext<AnyContext['platform'], Route>;
    type Handler<_Params = Route['params'], _Meta = Route['meta']> = HandlerLike<Route>;
    function route(handler: Handler): typeof handler;
    function route<_Params = Route['params'], _Meta = Route['meta']>(handler: Handler): typeof handler;
  }
}

declare module './_protected/_home/+page.marko' {
  export interface Input {}

  namespace MarkoRun {
    type Route = Route1;
    type Context = AnyContext<AnyContext['platform'], Route>;
  }
}

declare module './_protected/_home/new/+page.marko' {
  export interface Input {}

  namespace MarkoRun {
    type Route = Route2;
    type Context = AnyContext<AnyContext['platform'], Route>;
  }
}

declare module './_protected/_home/notes/$id/+page.marko' {
  export interface Input {}

  namespace MarkoRun {
    type Route = Route3;
    type Context = AnyContext<AnyContext['platform'], Route>;
  }
}

declare module './my/+page.marko' {
  export interface Input {}

  namespace MarkoRun {
    type Route = Route6;
    type Context = AnyContext<AnyContext['platform'], Route>;
  }
}

declare module './+layout.marko' {
  export interface Input {
    renderBody: Marko.Body;
  }

  namespace MarkoRun {
    type Route = Route1 | Route2 | Route3 | Route6;
    type Context = AnyContext<AnyContext['platform'], Route>;
  }
}

declare module './_protected/_home/+layout.marko' {
  export interface Input {
    renderBody: Marko.Body;
  }

  namespace MarkoRun {
    type Route = Route1 | Route2 | Route3;
    type Context = AnyContext<AnyContext['platform'], Route>;
  }
}

declare module './+404.marko' {
  export interface Input {}

  namespace MarkoRun {
    type Route = AnyRoute;
    type Context = AnyContext<AnyContext['platform'], Route>;
  }
}

declare module './+500.marko' {
  export interface Input {
    error: unknown;
  }

  namespace MarkoRun {
    type Route = AnyRoute;
    type Context = AnyContext<AnyContext['platform'], Route>;
  }
}
